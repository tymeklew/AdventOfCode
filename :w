const PUZZLE: &str = include_str!("../puzzles/day4.txt");

#[derive(Debug, Clone, Copy)]
struct Card {
    id: u8,
    matches: u8,
}

struct Solver {}

pub fn solution() {
    let mut sum = 0;
    let mut points = 0;

    let mut cards: Vec<Card> = vec![];

    for line in PUZZLE.lines() {
        let (left, right) = line.split_once("|").unwrap();

        let (card, winning) = left.split_once(":").unwrap();

        let id = card
            .split_whitespace()
            .last()
            .unwrap()
            .parse::<u8>()
            .unwrap();

        let mut card = Card { id, matches: 0 };

        let win = winning
            .trim()
            .split_whitespace()
            .filter_map(|f| f.parse::<u32>().ok())
            .collect::<Vec<u32>>();

        let yours = right
            .trim()
            .split_whitespace()
            .filter_map(|f| f.parse::<u32>().ok())
            .collect::<Vec<u32>>();

        for num in yours {
            if let Some(_) = win.iter().find(|f| **f == num) {
                card.matches += 1;

                /* Part 1
                if points == 0 {
                    points = 1;
                } else {
                    points *= 2;
                }*/
            }
        }

        cards.push(card);
    }
}
